{"version":3,"sources":["../src/services/graphClient.ts","../src/services/agentService.ts","../src/index.ts"],"names":["client"],"mappings":"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","file":"index.mjs","sourcesContent":["import { Client } from \"@microsoft/microsoft-graph-client\";\r\nimport { TokenCredentialAuthenticationProvider } from \"@microsoft/microsoft-graph-client/authProviders/azureTokenCredentials\";\r\nimport { ClientSecretCredential } from \"@azure/identity\";\r\n\r\n// Initialize Graph client with app-only authentication\r\nlet graphClient: Client | null = null;\r\n\r\nexport function getGraphClient(): Client {\r\n  if (graphClient) {\r\n    return graphClient;\r\n  }\r\n\r\n  const clientId = process.env.M365_CLIENT_ID || process.env.REACT_APP_CLIENT_ID;\r\n  const tenantId = process.env.M365_TENANT_ID || process.env.REACT_APP_TENANT_ID || \"common\";\r\n  const clientSecret = process.env.M365_CLIENT_SECRET;\r\n\r\n  if (!clientId || !clientSecret) {\r\n    throw new Error(\r\n      \"Microsoft Graph credentials not configured. Please set M365_CLIENT_ID and M365_CLIENT_SECRET in .localConfigs\"\r\n    );\r\n  }\r\n\r\n  // Create credential for app-only authentication\r\n  const credential = new ClientSecretCredential(tenantId, clientId, clientSecret);\r\n\r\n  // Create authentication provider\r\n  const authProvider = new TokenCredentialAuthenticationProvider(credential, {\r\n    scopes: [\"https://graph.microsoft.com/.default\"],\r\n  });\r\n\r\n  // Initialize Graph client\r\n  graphClient = Client.initWithMiddleware({\r\n    authProvider: authProvider,\r\n  });\r\n\r\n  return graphClient;\r\n}\r\n\r\n// User search functions\r\nexport async function searchUsers(query: string) {\r\n  const client = getGraphClient();\r\n  \r\n  try {\r\n    const response = await client\r\n      .api(\"/users\")\r\n      .filter(`startsWith(displayName,'${query}') or startsWith(mail,'${query}')`)\r\n      .select(\"id,displayName,mail,jobTitle,department,accountEnabled\")\r\n      .top(10)\r\n      .get();\r\n\r\n    return response.value;\r\n  } catch (error: any) {\r\n    console.error(\"[GRAPH] User search error:\", error.message);\r\n    throw new Error(`Failed to search users: ${error.message}`);\r\n  }\r\n}\r\n\r\nexport async function getUser(userId: string) {\r\n  const client = getGraphClient();\r\n  \r\n  try {\r\n    const user = await client\r\n      .api(`/users/${userId}`)\r\n      .select(\"id,displayName,mail,jobTitle,department,accountEnabled,assignedLicenses\")\r\n      .get();\r\n\r\n    return user;\r\n  } catch (error: any) {\r\n    console.error(\"[GRAPH] Get user error:\", error.message);\r\n    throw new Error(`Failed to get user: ${error.message}`);\r\n  }\r\n}\r\n\r\n// License and access management\r\nexport async function revokeUserAccess(userId: string, services: string[]) {\r\n  const client = getGraphClient();\r\n  const results: any[] = [];\r\n\r\n  try {\r\n    // Disable the account\r\n    if (services.includes(\"account\") || services.includes(\"all\")) {\r\n      await client.api(`/users/${userId}`).patch({\r\n        accountEnabled: false,\r\n      });\r\n      results.push({ service: \"account\", status: \"disabled\" });\r\n    }\r\n\r\n    // Revoke licenses (for email, teams, etc.)\r\n    if (services.includes(\"email\") || services.includes(\"teams\") || services.includes(\"office365\") || services.includes(\"all\")) {\r\n      const user = await client.api(`/users/${userId}`).select(\"assignedLicenses\").get();\r\n      \r\n      if (user.assignedLicenses && user.assignedLicenses.length > 0) {\r\n        const licenseIds = user.assignedLicenses.map((l: any) => l.skuId);\r\n        \r\n        await client.api(`/users/${userId}/assignLicense`).post({\r\n          addLicenses: [],\r\n          removeLicenses: licenseIds,\r\n        });\r\n        \r\n        results.push({ service: \"licenses\", status: \"revoked\", count: licenseIds.length });\r\n      }\r\n    }\r\n\r\n    // Revoke SharePoint access (remove from groups)\r\n    if (services.includes(\"sharepoint\") || services.includes(\"all\")) {\r\n      const groups = await client.api(`/users/${userId}/memberOf`).get();\r\n      \r\n      for (const group of groups.value) {\r\n        try {\r\n          await client.api(`/groups/${group.id}/members/${userId}/$ref`).delete();\r\n          results.push({ service: \"sharepoint_group\", status: \"removed\", group: group.displayName });\r\n        } catch (err) {\r\n          // Continue if removal fails\r\n        }\r\n      }\r\n    }\r\n\r\n    return results;\r\n  } catch (error: any) {\r\n    console.error(\"[GRAPH] Revoke access error:\", error.message);\r\n    throw new Error(`Failed to revoke access: ${error.message}`);\r\n  }\r\n}\r\n\r\n// OneDrive and mailbox delegation\r\nexport async function transferUserData(fromUserId: string, toUserId: string, dataTypes: string[]) {\r\n  const client = getGraphClient();\r\n  const results: any[] = [];\r\n\r\n  try {\r\n    // Transfer mailbox (delegate access)\r\n    if (dataTypes.includes(\"emails\") || dataTypes.includes(\"mailbox\") || dataTypes.includes(\"all\")) {\r\n      // Grant full access to mailbox\r\n      // Note: This requires Exchange Online PowerShell for full mailbox access\r\n      // For now, we'll document what needs to be done\r\n      results.push({\r\n        dataType: \"mailbox\",\r\n        status: \"pending_manual\",\r\n        message: \"Mailbox delegation requires Exchange Online admin action\",\r\n        action: `Run: Add-MailboxPermission -Identity \"${fromUserId}\" -User \"${toUserId}\" -AccessRights FullAccess`,\r\n      });\r\n    }\r\n\r\n    // Transfer OneDrive files\r\n    if (dataTypes.includes(\"files\") || dataTypes.includes(\"onedrive\") || dataTypes.includes(\"all\")) {\r\n      // Get the source user's drive\r\n      const drive = await client.api(`/users/${fromUserId}/drive`).get();\r\n      \r\n      results.push({\r\n        dataType: \"onedrive\",\r\n        status: \"accessible\",\r\n        message: `OneDrive accessible for transfer`,\r\n        driveId: drive.id,\r\n        action: `Use SharePoint admin to transfer ownership or grant access to ${toUserId}`,\r\n      });\r\n    }\r\n\r\n    // Transfer calendar (delegate access)\r\n    if (dataTypes.includes(\"calendar\") || dataTypes.includes(\"all\")) {\r\n      // Grant calendar permissions\r\n      await client.api(`/users/${fromUserId}/calendar/permissions`).post({\r\n        emailAddress: {\r\n          address: toUserId,\r\n          name: toUserId,\r\n        },\r\n        role: \"read\",\r\n      });\r\n      \r\n      results.push({\r\n        dataType: \"calendar\",\r\n        status: \"delegated\",\r\n        message: \"Calendar read access granted\",\r\n      });\r\n    }\r\n\r\n    return results;\r\n  } catch (error: any) {\r\n    console.error(\"[GRAPH] Transfer data error:\", error.message);\r\n    throw new Error(`Failed to transfer data: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Group and team memberships\r\nexport async function getUserMemberships(userId: string) {\r\n  const client = getGraphClient();\r\n  \r\n  try {\r\n    const memberships = await client\r\n      .api(`/users/${userId}/memberOf`)\r\n      .select(\"id,displayName,mail,groupTypes\")\r\n      .get();\r\n\r\n    return memberships.value;\r\n  } catch (error: any) {\r\n    console.error(\"[GRAPH] Get memberships error:\", error.message);\r\n    throw new Error(`Failed to get user memberships: ${error.message}`);\r\n  }\r\n}\r\n","import OpenAI from \"openai\";\r\nimport { searchUsers, revokeUserAccess, transferUserData, getUser } from \"./graphClient\";\r\n\r\n// Initialize OpenAI client with GitHub Models endpoint\r\nconst client = new OpenAI({\r\n  apiKey: process.env.GITHUB_TOKEN || process.env.OPENAI_API_KEY || \"your-api-key-here\",\r\n  baseURL: process.env.OPENAI_BASE_URL || \"https://models.inference.ai.azure.com\",\r\n});\r\n\r\nconst MODEL = process.env.OPENAI_MODEL || \"gpt-4o\";\r\n\r\n// Employee offboarding tools/functions\r\nconst tools: OpenAI.Chat.ChatCompletionTool[] = [\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"search_employee\",\r\n      description: \"Search for an employee in the Microsoft 365 directory by name or email\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          query: {\r\n            type: \"string\",\r\n            description: \"The employee name or email to search for\",\r\n          },\r\n        },\r\n        required: [\"query\"],\r\n      },\r\n    },\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"create_offboarding_session\",\r\n      description: \"Create a new offboarding session for an employee\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          employeeId: {\r\n            type: \"string\",\r\n            description: \"The ID of the employee to offboard\",\r\n          },\r\n          reason: {\r\n            type: \"string\",\r\n            description: \"Reason for offboarding (resignation, termination, retirement, etc.)\",\r\n          },\r\n          lastWorkingDay: {\r\n            type: \"string\",\r\n            description: \"Last working day in YYYY-MM-DD format\",\r\n          },\r\n        },\r\n        required: [\"employeeId\", \"reason\", \"lastWorkingDay\"],\r\n      },\r\n    },\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"get_offboarding_checklist\",\r\n      description: \"Get the offboarding checklist and current progress for an employee\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          sessionId: {\r\n            type: \"string\",\r\n            description: \"The offboarding session ID\",\r\n          },\r\n        },\r\n        required: [\"sessionId\"],\r\n      },\r\n    },\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"revoke_access\",\r\n      description: \"Revoke access to Microsoft 365 services for an employee\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          employeeId: {\r\n            type: \"string\",\r\n            description: \"The ID of the employee\",\r\n          },\r\n          services: {\r\n            type: \"array\",\r\n            items: { type: \"string\" },\r\n            description: \"List of services to revoke access from (e.g., 'email', 'teams', 'sharepoint')\",\r\n          },\r\n        },\r\n        required: [\"employeeId\", \"services\"],\r\n      },\r\n    },\r\n  },\r\n  {\r\n    type: \"function\",\r\n    function: {\r\n      name: \"transfer_data\",\r\n      description: \"Transfer data and responsibilities from one employee to another\",\r\n      parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n          fromEmployeeId: {\r\n            type: \"string\",\r\n            description: \"The ID of the employee leaving\",\r\n          },\r\n          toEmployeeId: {\r\n            type: \"string\",\r\n            description: \"The ID of the employee taking over\",\r\n          },\r\n          dataTypes: {\r\n            type: \"array\",\r\n            items: { type: \"string\" },\r\n            description: \"Types of data to transfer (e.g., 'emails', 'files', 'calendar')\",\r\n          },\r\n        },\r\n        required: [\"fromEmployeeId\", \"toEmployeeId\", \"dataTypes\"],\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\n// Mock function implementations (you can replace these with real Microsoft Graph API calls)\r\nasync function executeFunction(name: string, args: any): Promise<string> {\r\n  console.log(`[AGENT] Executing function: ${name} with args:`, JSON.stringify(args));\r\n  \r\n  // Check if we should use real Graph API or mock data\r\n  const useRealAPI = process.env.USE_REAL_GRAPH_API === \"true\";\r\n  \r\n  try {\r\n    switch (name) {\r\n      case \"search_employee\":\r\n        if (useRealAPI) {\r\n          try {\r\n            const users = await searchUsers(args.query);\r\n            return JSON.stringify({\r\n              employees: users.map((u: any) => ({\r\n                id: u.id,\r\n                name: u.displayName,\r\n                email: u.mail || u.userPrincipalName,\r\n                department: u.department,\r\n                jobTitle: u.jobTitle,\r\n                accountEnabled: u.accountEnabled,\r\n              })),\r\n              source: \"Microsoft Graph API\",\r\n            });\r\n          } catch (error: any) {\r\n            console.warn(\"[AGENT] Falling back to mock data:\", error.message);\r\n            // Fall through to mock data\r\n          }\r\n        }\r\n        \r\n        // Mock data fallback\r\n        return JSON.stringify({\r\n          employees: [\r\n            { id: \"emp-001\", name: args.query, email: `${args.query.toLowerCase().replace(\" \", \".\")}@company.com`, department: \"Engineering\", accountEnabled: true },\r\n            { id: \"emp-002\", name: `${args.query} (Manager)`, email: `${args.query.toLowerCase().replace(\" \", \".\")}.mgr@company.com`, department: \"Engineering\", accountEnabled: true },\r\n          ],\r\n          source: \"Mock Data\",\r\n        });\r\n      \r\n      case \"create_offboarding_session\":\r\n        // This is custom business logic - keep as mock/database\r\n        return JSON.stringify({\r\n          sessionId: `session-${Date.now()}`,\r\n          employeeId: args.employeeId,\r\n          reason: args.reason,\r\n          lastWorkingDay: args.lastWorkingDay,\r\n          status: \"created\",\r\n          message: \"Offboarding session created successfully\",\r\n        });\r\n      \r\n      case \"get_offboarding_checklist\":\r\n        // Custom business logic - could integrate with SharePoint lists or custom database\r\n        return JSON.stringify({\r\n          sessionId: args.sessionId,\r\n          checklist: [\r\n            { id: 1, task: \"Revoke system access\", status: \"pending\", priority: \"high\" },\r\n            { id: 2, task: \"Disable email account\", status: \"pending\", priority: \"high\" },\r\n            { id: 3, task: \"Transfer data ownership\", status: \"pending\", priority: \"medium\" },\r\n            { id: 4, task: \"Collect company assets\", status: \"pending\", priority: \"medium\" },\r\n            { id: 5, task: \"Exit interview\", status: \"pending\", priority: \"low\" },\r\n          ],\r\n          progress: \"0% complete\",\r\n        });\r\n      \r\n      case \"revoke_access\":\r\n        if (useRealAPI) {\r\n          try {\r\n            const results = await revokeUserAccess(args.employeeId, args.services);\r\n            return JSON.stringify({\r\n              employeeId: args.employeeId,\r\n              servicesRevoked: args.services,\r\n              results: results,\r\n              status: \"success\",\r\n              message: `Access revoked for ${args.services.join(\", \")}`,\r\n              source: \"Microsoft Graph API\",\r\n            });\r\n          } catch (error: any) {\r\n            console.warn(\"[AGENT] Falling back to mock data:\", error.message);\r\n            // Fall through to mock data\r\n          }\r\n        }\r\n        \r\n        // Mock data fallback\r\n        return JSON.stringify({\r\n          employeeId: args.employeeId,\r\n          servicesRevoked: args.services,\r\n          status: \"success\",\r\n          message: `Access revoked for ${args.services.join(\", \")}`,\r\n          source: \"Mock Data\",\r\n        });\r\n      \r\n      case \"transfer_data\":\r\n        if (useRealAPI) {\r\n          try {\r\n            const results = await transferUserData(args.fromEmployeeId, args.toEmployeeId, args.dataTypes);\r\n            return JSON.stringify({\r\n              fromEmployeeId: args.fromEmployeeId,\r\n              toEmployeeId: args.toEmployeeId,\r\n              dataTypesTransferred: args.dataTypes,\r\n              results: results,\r\n              status: \"in_progress\",\r\n              message: `Data transfer initiated for ${args.dataTypes.join(\", \")}`,\r\n              source: \"Microsoft Graph API\",\r\n            });\r\n          } catch (error: any) {\r\n            console.warn(\"[AGENT] Falling back to mock data:\", error.message);\r\n            // Fall through to mock data\r\n          }\r\n        }\r\n        \r\n        // Mock data fallback\r\n        return JSON.stringify({\r\n          fromEmployeeId: args.fromEmployeeId,\r\n          toEmployeeId: args.toEmployeeId,\r\n          dataTypesTransferred: args.dataTypes,\r\n          status: \"in_progress\",\r\n          message: `Data transfer initiated for ${args.dataTypes.join(\", \")}`,\r\n          source: \"Mock Data\",\r\n        });\r\n      \r\n      default:\r\n        return JSON.stringify({ error: \"Unknown function\" });\r\n    }\r\n  } catch (error: any) {\r\n    console.error(`[AGENT] Error executing ${name}:`, error);\r\n    return JSON.stringify({ error: error.message, function: name });\r\n  }\r\n}\r\n\r\n// System prompt for the agent\r\nconst SYSTEM_PROMPT = `You are an intelligent Employee Offboarding Assistant for Microsoft 365.\r\n\r\nYour role is to help HR managers and IT administrators efficiently offboard employees while ensuring:\r\n- Data security and compliance\r\n- Smooth transition of responsibilities\r\n- Complete revocation of access\r\n- Proper documentation\r\n\r\nWhen responding to user queries, use chain of thought reasoning:\r\n1. Analyze what the user is asking\r\n2. Determine which tools/functions you need to call\r\n3. Execute the functions in the correct order\r\n4. Synthesize the results into a clear, actionable response\r\n\r\nAlways think step-by-step and explain your reasoning when appropriate.\r\n\r\nAvailable capabilities:\r\n- Search for employees in the directory\r\n- Create offboarding sessions\r\n- Get offboarding checklists\r\n- Revoke access to services\r\n- Transfer data and responsibilities\r\n\r\nBe proactive, thorough, and security-conscious in your responses.`;\r\n\r\n// Conversation history per user\r\nconst conversationHistory = new Map<string, OpenAI.Chat.ChatCompletionMessageParam[]>();\r\n\r\nexport async function processAgenticMessage(\r\n  userMessage: string,\r\n  userId: string = \"default\"\r\n): Promise<string> {\r\n  try {\r\n    // Get or initialize conversation history\r\n    if (!conversationHistory.has(userId)) {\r\n      conversationHistory.set(userId, [\r\n        { role: \"system\", content: SYSTEM_PROMPT },\r\n      ]);\r\n    }\r\n    \r\n    const messages = conversationHistory.get(userId)!;\r\n    \r\n    // Add user message\r\n    messages.push({ role: \"user\", content: userMessage });\r\n    \r\n    // Track chain of thought for user visibility\r\n    const thoughtProcess: string[] = [];\r\n    \r\n    let response = await client.chat.completions.create({\r\n      model: MODEL,\r\n      messages: messages,\r\n      tools: tools,\r\n      tool_choice: \"auto\",\r\n      temperature: 0.7,\r\n      max_tokens: 1500,\r\n    });\r\n    \r\n    let assistantMessage = response.choices[0].message;\r\n    let iterations = 0;\r\n    const maxIterations = 10;\r\n    \r\n    // Handle function calls (agent loop)\r\n    while (assistantMessage.tool_calls && iterations < maxIterations) {\r\n      iterations++;\r\n      console.log(`[AGENT] Chain of thought iteration ${iterations}`);\r\n      \r\n      // Add assistant's message with tool calls\r\n      messages.push(assistantMessage);\r\n      \r\n      // Execute all tool calls\r\n      for (const toolCall of assistantMessage.tool_calls) {\r\n        if (toolCall.type !== \"function\") continue;\r\n        \r\n        const functionName = toolCall.function?.name;\r\n        const functionArgs = JSON.parse(toolCall.function?.arguments || \"{}\");\r\n        \r\n        // Add to thought process for user\r\n        thoughtProcess.push(`🤔 **Thinking**: I need to ${functionName.replace(/_/g, ' ')} ${JSON.stringify(functionArgs).substring(0, 100)}...`);\r\n        \r\n        console.log(`[AGENT] 🤔 Thinking: I need to ${functionName} with ${JSON.stringify(functionArgs)}`);\r\n        \r\n        const functionResult = await executeFunction(functionName, functionArgs);\r\n        \r\n        // Add result summary to thought process\r\n        thoughtProcess.push(`✅ **Action completed**: ${functionName.replace(/_/g, ' ')}`);\r\n        \r\n        // Add function result to messages\r\n        messages.push({\r\n          role: \"tool\",\r\n          tool_call_id: toolCall.id,\r\n          content: functionResult,\r\n        });\r\n      }\r\n      \r\n      // Get next response from model\r\n      response = await client.chat.completions.create({\r\n        model: MODEL,\r\n        messages: messages,\r\n        tools: tools,\r\n        tool_choice: \"auto\",\r\n        temperature: 0.7,\r\n        max_tokens: 1500,\r\n      });\r\n      \r\n      assistantMessage = response.choices[0].message;\r\n    }\r\n    \r\n    // Add final assistant message\r\n    messages.push(assistantMessage);\r\n    \r\n    // Keep conversation history manageable (last 20 messages)\r\n    if (messages.length > 20) {\r\n      conversationHistory.set(userId, [\r\n        messages[0], // Keep system prompt\r\n        ...messages.slice(-19),\r\n      ]);\r\n    }\r\n    \r\n    // Build response with chain of thought\r\n    let finalResponse = \"\";\r\n    if (thoughtProcess.length > 0) {\r\n      finalResponse += \"**🧠 Chain of Thought:**\\n\\n\";\r\n      finalResponse += thoughtProcess.join(\"\\n\\n\") + \"\\n\\n---\\n\\n\";\r\n    }\r\n    finalResponse += assistantMessage.content || \"I apologize, I couldn't process that request.\";\r\n    \r\n    return finalResponse;\r\n    \r\n  } catch (error: any) {\r\n    console.error(\"[AGENT ERROR]\", error);\r\n    return `I encountered an error: ${error.message}. Please make sure your API key is configured correctly.`;\r\n  }\r\n}\r\n\r\nexport function clearConversation(userId: string = \"default\"): void {\r\n  conversationHistory.delete(userId);\r\n  console.log(`[AGENT] Cleared conversation history for user ${userId}`);\r\n}\r\n","import fs from \"fs\";\nimport https from \"https\";\nimport path from \"path\";\n\nimport { App, HttpPlugin, IPlugin } from \"@microsoft/teams.apps\";\nimport { ConsoleLogger } from \"@microsoft/teams.common/logging\";\nimport { DevtoolsPlugin } from \"@microsoft/teams.dev\";\nimport { processAgenticMessage } from \"./services/agentService\";\n\nconst sslOptions = {\n  key: process.env.SSL_KEY_FILE ? fs.readFileSync(process.env.SSL_KEY_FILE) : undefined,\n  cert: process.env.SSL_CRT_FILE ? fs.readFileSync(process.env.SSL_CRT_FILE) : undefined,\n};\nconst plugins: IPlugin[] = [new DevtoolsPlugin()];\nif (sslOptions.cert && sslOptions.key) {\n  plugins.push(new HttpPlugin(https.createServer(sslOptions)));\n}\nconst app = new App({\n  logger: new ConsoleLogger(\"tab\", { level: \"debug\" }),\n  plugins: plugins,\n});\n\n// Serve the static client\napp.tab(\"home\", path.join(__dirname, \"./client\"));\n\n// Handle all message activities with agentic processing\napp.on(\"message\", async (context) => {\n  const userMessage = context.activity.text || \"\";\n  const userId = context.activity.from?.id || \"default\";\n  \n  console.log(`[INFO] Received message from ${userId}: ${userMessage}`);\n  \n  try {\n    // Use agentic service with chain of thought reasoning\n    const responseText = await processAgenticMessage(userMessage, userId);\n    \n    // Send response back\n    await context.send({\n      type: \"message\",\n      text: responseText\n    });\n    \n    console.log(`[INFO] Sent agentic response (${responseText.length} chars)`);\n  } catch (error: any) {\n    console.error(\"[ERROR]\", error);\n    await context.send({\n      type: \"message\",\n      text: `I apologize, but I encountered an error: ${error.message}. Please try again.`\n    });\n  }\n});\n\n(async () => {\n  await app.start(+(process.env.PORT || 3978));\n})();\n"]}